{"version":3,"sources":["components/Navigation/index.js","constants/routes.js","components/Kitchen/index.js","components/Home/index.js","components/Button/index.js","components/Counter/index.js","components/MenuBreakfast/index.js","components/Order/index.js","components/Sent/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","react_router_dom","to","Kitchen","Home","Button","props","className","concat","extraClassName","onClick","action","name","Counter","state","item","_this","count","value","price","handleIncrement","setState","handleDecrement","reset","this","components_Button","formatCount","Component","MenuBreakfast","menu","id","map","counter","components_Counter","key","Order","components_MenuBreakfast","Sent","App","components_Navigation","react_router","exact","path","component","OrderPage","KitchenPage","HomePage","SentPage","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef1de3cc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as ROUTES from \"../../constants/routes\";\r\n\r\nconst Navigation = () => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <Link to={ROUTES.HOME}>Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.ORDER}>Crear Orden</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.KITCHEN}>Pedidos a Cocina</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.SENT}>Enviado</Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","export const KITCHEN = \"/kitchen\";\nexport const ORDER = \"/order\";\nexport const HOME = \"/\";\nexport const SENT = \"/sent\";\n","import React from \"react\";\r\n\r\nconst Kitchen = () => (\r\n  <div>\r\n    <h1>Kitchen</h1>\r\n  </div>\r\n);\r\n\r\nexport default Kitchen;\r\n","import React from \"react\";\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Home</h1>\r\n  </div>\r\n);\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button\r\n      className={`Button Button-primary ${\r\n        props.extraClassName ? props.extraClassName : \"\"\r\n      }`}\r\n      onClick={props.action}\r\n    >\r\n      {props.name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../Button\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    item: this.props.name,\r\n    count: this.props.value,\r\n    price:this.props.price\r\n  };\r\n  //   constructor() {\r\n  //     super();\r\n  //     this.handleIncrement = this.handleIncrement.bind(this);\r\n  //   }\r\n\r\n  handleIncrement = () => {\r\n    this.setState({ count: this.state.count + 1 });\r\n  };\r\n  handleDecrement = () => {\r\n    this.setState({ count: this.state.count - 1 });\r\n  };\r\n  reset = () => {\r\n    this.setState({ count: 0 });\r\n  };\r\n  formatCount() {\r\n    const { count } = this.state;\r\n    if (count < 0) {\r\n      this.reset();\r\n    }\r\n    return count === 0 ? <label>Cant.</label> : <label>{count}</label>;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label>{this.state.item}</label>\r\n        <Button\r\n          name=\"+\"\r\n          action={this.handleIncrement}\r\n          extraClassName=\"counter-btn\"\r\n        />\r\n        <Button\r\n          name=\"-\"\r\n          action={this.handleDecrement}\r\n          extraClassName=\"couunter-btn\"\r\n        />\r\n        <span>{this.formatCount()}</span>\r\n        <Button\r\n          name=\"borrar\"\r\n          action={this.reset}\r\n          extraClassName=\"counter-btn\"\r\n        />\r\n         <label>{this.state.price}</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"../Counter\";\r\n\r\nclass MenuBreakfast extends Component {\r\n  state = {\r\n    menu: [\r\n      { id: \"b01\", name: \"Café Americano\", value: 0, price:5 },\r\n      { id: \"b02\", name: \"Café con Leche\", value: 0, price:7 },\r\n      { id: \"b03\", name: \"Jugo de Frutas Natural\", value: 0, price:10 },\r\n      { id: \"b04\", name: \"Sandwich de Jamón y Queso\", value: 0, price:10 }\r\n    ]\r\n  };\r\n  render() {\r\n    return (\r\n      <section>\r\n        <h2>Menú Desayuno</h2>\r\n        {this.state.menu.map(counter => (\r\n          <Counter key={counter.id} name={counter.name} value={counter.value} price={`$${counter.price}`} />\r\n        ))}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuBreakfast;\r\n","import React, { Component } from \"react\";\r\nimport MenuBreakfast from \"../MenuBreakfast\";\r\n\r\nclass Order extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MenuBreakfast />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Order;\r\n\r\n// const Order = () => (\r\n//   <div>\r\n//     <h1>Order</h1>\r\n//     <Counter />\r\n//     <Counter />\r\n//   </div>\r\n// );\r\n\r\n// export default Order;\r\n","import React from \"react\";\r\n\r\nconst Sent = () => (\r\n  <div>\r\n    <h1>Sent</h1>\r\n  </div>\r\n);\r\n\r\nexport default Sent;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Navigation from \"../Navigation\";\r\nimport KitchenPage from \"../Kitchen\";\r\nimport HomePage from \"../Home\";\r\nimport OrderPage from \"../Order\";\r\nimport SentPage from \"../Sent\";\r\n\r\nimport * as ROUTES from \"../../constants/routes\";\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <div>\r\n      <Navigation />\r\n      <hr />\r\n      <Route exact path={ROUTES.ORDER} component={OrderPage} />\r\n      <Route exact path={ROUTES.KITCHEN} component={KitchenPage} />\r\n      <Route exact path={ROUTES.HOME} component={HomePage} />\r\n      <Route exact path={ROUTES.SENT} component={SentPage} />\r\n    </div>\r\n  </Router>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}